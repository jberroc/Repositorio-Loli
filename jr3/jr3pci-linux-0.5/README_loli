This is a linux driver for the JR3 force/torque sensor (PCI card), under 2.4 kernels. Currently, two cards are supported:

- Single channel PCI
- Double channel PCI (for two sensors, or one 12DOF sensor)

Only filtered reads and zero offsets setup are supported.

For compiling it, edit jr3pci-driver.h and set PCI_DEVICE_ID_JR3 to be that of your card.
Then, edit the Makefile, and set the path to your kernel sources.
Finally, type 'make'.

The module is compiled in the file jr3pci-driver.o. For inserting it into the kernel, type 'insmod ./jr3pci-driver.o' for kernels <=2.4, or 'insmod ./jr3pci-driver.ko' for 2.6 kernels

After inserting it, look at the green leds of your PCI card. If they are on, you're in chance!!! :)

Also included is a simple test program 'jr3mon' which reads force values infinitelly. For user space programs to work, you must first create the device file into /dev directory with the command:

mknod /dev/jr3 c 39 0

Alternatively, you can try 'make node'.

Problems, suggestions or anything else: mprats@icc.uji.es


//**********************************************************************//

To support other cards as:
- Triple channel PCI
- Quadruple channel PCI

Instructions below are for 4 channel cards.

1. Edit al the files as mentioned above. Following the steps, you finally have a 4 channel card with only 2 channels enabled.

2. Edit jr3pci-driver.c and add in the function jr3pci_init_module, at the end:
	show_copyright(0);	
	if (PCI_DEVICE_ID_JR3==0x3114)
		jr3pci_initDSP(2);
		show_copyright(1);
		
	if (PCI_DEVICE_ID_JR3==0x3114)
		jr3pci_initDSP(3);
		show_copyright(2);
		
	if (PCI_DEVICE_ID_JR3==0x3114)
		show_copyright(3);


3. Edit jr3pci-driver.h and set PCI_DEVICE_ID_JR3 as 0x3114 (Done before)
	Single channel card: 0x3111
	Double channel card: 0x3112
	Triple channel card: 0x3113
	Quadruple channel card: 0x3114   (THIS ONE)

4. Edti jr3pci-ioctl.c and set cases for two more channels. Copy the code below. 

	//Sensor2
		case IOCTL2_JR3_RESET:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3Reset(2);
			else ret=-1;
			break;
		case IOCTL2_JR3_ZEROOFFS:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3ZeroOffs(2);
			else ret=-1;
			break;
		case IOCTL2_JR3_FILTER0:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3Filter(arg, 0,2);
			else ret=-1;
			break;
		case IOCTL2_JR3_FILTER1:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3Filter(arg, 1,2);
			else ret=-1;
			break;
		case IOCTL2_JR3_FILTER2:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3Filter(arg, 2,2);
			else ret=-1;
			break;
		case IOCTL2_JR3_FILTER3:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3Filter(arg, 3,2);
			else ret=-1;
			break;
		case IOCTL2_JR3_FILTER4:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3Filter(arg, 4,2);
			else ret=-1;
			break;
		case IOCTL2_JR3_FILTER5:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3Filter(arg, 5,2);
			else ret=-1;
			break;
		case IOCTL2_JR3_FILTER6:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3Filter(arg, 6,2);
			else ret=-1;
			break;
		case IOCTL2_JR3_GET_FULL_SCALES:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3GetFullScales(arg,2);
			else ret=-1;
			break;
			
	//Sensor3 			
		case IOCTL3_JR3_RESET:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3Reset(3);
			else ret=-1;
			break;
		case IOCTL3_JR3_ZEROOFFS:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3ZeroOffs(3);
			else ret=-1;
			break;
		case IOCTL3_JR3_FILTER0:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3Filter(arg, 0,3);
			else ret=-1;
			break;
		case IOCTL3_JR3_FILTER1:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3Filter(arg, 1,3);
			else ret=-1;
			break;
		case IOCTL3_JR3_FILTER2:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3Filter(arg, 2,3);
			else ret=-1;
			break;
		case IOCTL3_JR3_FILTER3:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3Filter(arg, 3,3);
			else ret=-1;
			break;
		case IOCTL3_JR3_FILTER4:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3Filter(arg, 4,3);
			else ret=-1;
			break;
		case IOCTL3_JR3_FILTER5:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3Filter(arg, 5,3);
			else ret=-1;
			break;
		case IOCTL3_JR3_FILTER6:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3Filter(arg, 6,3);
			else ret=-1;
			break;
		case IOCTL3_JR3_GET_FULL_SCALES:
			if (PCI_DEVICE_ID_JR3==0x3114)
				ret = jr3GetFullScales(arg,3);
			else ret=-1;
			break;
		default:
			return -ENOTTY;


 4. Copy in jr3pci-ioctl.h :
#define IOCTL2_JR3_RESET              _IO ( JR3_TYPE, 20 )
#define IOCTL2_JR3_FILTER0            _IOR( JR3_TYPE, 21,  struct six_axis_array )
#define IOCTL2_JR3_FILTER1            _IOR( JR3_TYPE, 22,  struct six_axis_array )
#define IOCTL2_JR3_FILTER2            _IOR( JR3_TYPE, 23,  struct six_axis_array )
#define IOCTL2_JR3_FILTER3            _IOR( JR3_TYPE, 24,  struct six_axis_array )
#define IOCTL2_JR3_FILTER4            _IOR( JR3_TYPE, 25,  struct six_axis_array )
#define IOCTL2_JR3_FILTER5            _IOR( JR3_TYPE, 26,  struct six_axis_array )
#define IOCTL2_JR3_FILTER6            _IOR( JR3_TYPE, 27,  struct six_axis_array )
#define IOCTL2_JR3_ZEROOFFS           _IO ( JR3_TYPE, 28   )
#define IOCTL2_JR3_GET_FULL_SCALES    _IOR( JR3_TYPE, 29,  struct force_array )

#define IOCTL3_JR3_RESET              _IO ( JR3_TYPE, 30 )
#define IOCTL3_JR3_FILTER0            _IOR( JR3_TYPE, 31,  struct six_axis_array )
#define IOCTL3_JR3_FILTER1            _IOR( JR3_TYPE, 32,  struct six_axis_array )
#define IOCTL3_JR3_FILTER2            _IOR( JR3_TYPE, 33,  struct six_axis_array )
#define IOCTL3_JR3_FILTER3            _IOR( JR3_TYPE, 34,  struct six_axis_array )
#define IOCTL3_JR3_FILTER4            _IOR( JR3_TYPE, 35,  struct six_axis_array )
#define IOCTL3_JR3_FILTER5            _IOR( JR3_TYPE, 36,  struct six_axis_array )
#define IOCTL3_JR3_FILTER6            _IOR( JR3_TYPE, 37,  struct six_axis_array )
#define IOCTL3_JR3_ZEROOFFS           _IO ( JR3_TYPE, 38   )
#define IOCTL3_JR3_GET_FULL_SCALES    _IOR( JR3_TYPE, 39,  struct force_array )

And set IOCTL_JR3_MAXNR 40


And finally, compile and do make and all the 4 LEDs must be green!


